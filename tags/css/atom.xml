<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Naeco&#x27;s blog - css</title>
    <link rel="self" type="application/atom+xml" href="https://naecoo.github.io/tags/css/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://naecoo.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2021-07-16T00:00:00+00:00</updated>
    <id>https://naecoo.github.io/tags/css/atom.xml</id>
    <entry xml:lang="en">
        <title>对tailwindcss的一些简单看法</title>
        <published>2021-07-16T00:00:00+00:00</published>
        <updated>2021-07-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              naeco
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://naecoo.github.io/tailwindcss/"/>
        <id>https://naecoo.github.io/tailwindcss/</id>
        
        <content type="html" xml:base="https://naecoo.github.io/tailwindcss/">&lt;blockquote&gt;
&lt;p&gt;本文是笔者对于Tailwind的一些简单看法，并不涉及Tailwind的介绍和学习等内容，对于后者而言，网上的资源是非常丰富的，本文不会复述这些内容。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;qian-yan&quot;&gt;前言&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;naecoo.github.io&#x2F;tailwindcss&#x2F;%5Btailwindcss.com%5D(https:&#x2F;&#x2F;tailwindcss.com&#x2F;)&quot;&gt;Tailwind&lt;&#x2F;a&gt;是一个用于快速开发界面，原子类优先的css框架，在过去的一年里非常流行，网上的讨论也十分多。如果你没听说过Tailwind和原子css，我们可以看一个例子：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bg-gray-100 flex-1 p-8 w-1 h-1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;Hello World&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Tailwind提供了包含多个预定义类的css集合，开发者不再需要编写CSS，而是在HTML中直接引用预先定义好的类名，上述的例子就采用了这些类名：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;背景 (bg-gray-100)&lt;&#x2F;li&gt;
&lt;li&gt;flex布局 (flex-1)&lt;&#x2F;li&gt;
&lt;li&gt;内边距 (p-8)&lt;&#x2F;li&gt;
&lt;li&gt;尺寸 (w-1, h-1)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Tailwind提供了成千上万的预设类名，尽可能包括了所有基础css特性，同时提供了响应式、hover和focus状态、深色模式等等特性。所以开发者不再需要管理css，只需要像乐高积木那样，通过丰富的类名，组合成自己想要的效果&lt;&#x2F;p&gt;
&lt;h2 id=&quot;you-dian&quot;&gt;优点&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;ke-ding-zhi-hua-cheng-du-gao&quot;&gt;可定制化程度高&lt;&#x2F;h3&gt;
&lt;p&gt;如果不喜欢Tailwind的默认配置，开发者可以在tailwind.config.js文件中修改，定制主题、响应式断点、颜色、间距等等的配置，甚至，还可以引入第三方的插件和预设，覆盖默认配置。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bu-xu-yao-guan-li-cssyang-shi&quot;&gt;不需要管理CSS样式&lt;&#x2F;h3&gt;
&lt;p&gt;使用了Taliwind之后，你不再需要编写新的css，也不用再管理css，不用在为class的起名感到烦恼。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ti-gao-liao-kai-fa-de-xiao-lu&quot;&gt;提高了开发的效率&lt;&#x2F;h3&gt;
&lt;p&gt;Taliwind提供了丰富的原子class，有点像乐高积木，开发者可以通过这些class拼装自己的模型，而不用再手动编写css样式。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;feng-fu-de-nei-zhi-te-xing&quot;&gt;丰富的内置特性&lt;&#x2F;h3&gt;
&lt;p&gt;Taliwind内置了许多有用的特性，比如响应式、动画和深色模式等等，开发者可以基于这些特性快速地开发出UI页面。如果不使用Tailwind，自己手动编写css代码，复杂度会相当高。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jian-shao-csswen-jian-ti-ji&quot;&gt;减少css文件体积&lt;&#x2F;h3&gt;
&lt;p&gt;Taliwind提供了purge的功能，也就是tree-shaking，可以清除未使用的类名，一般的项目只有10kb左右的css文件。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;que-dian&quot;&gt;缺点&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;bu-mei-guan&quot;&gt;不美观&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;min-w-0 flex-auto space-y-0.5&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text-lime-600 dark:text-lime-400 text-sm sm:text-base lg:text-sm xl:text-base font-semibold uppercase&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;abbr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Episode&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;Ep.&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;abbr&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; 128
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text-black dark:text-white text-base sm:text-xl lg:text-base xl:text-xl font-semibold truncate&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Scaling CSS at Heroku with Utility Classes
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h2&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text-gray-500 dark:text-gray-400 text-base sm:text-lg lg:text-base xl:text-lg font-medium&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Full Stack Radio
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用了Taliwind的标签看起来非常凌乱，丑陋...&lt;&#x2F;p&gt;
&lt;h3 id=&quot;xu-yao-dui-uishe-ji-gui-fan-you-yi-ding-de-li-jie&quot;&gt;需要对UI设计规范有一定的理解&lt;&#x2F;h3&gt;
&lt;p&gt;前面我们提到Taliwind的可定制化程度高，可以通过配置文件生成不同的预设，但是前提是UI设计要有一定的规范，否则很容易出现预设值无法覆盖所有尺寸的问题，比如设计师让一张图片圆角设为3px，这时候可能需要单独编写css了，但这也违反了Taliwind的原则。所以，使用Taliwind前，必须要有一套完善的UI设计规范，尽可能保证预设值能覆盖所有属性。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;you-yi-ding-de-shang-shou-cheng-ben&quot;&gt;有一定的上手成本&lt;&#x2F;h3&gt;
&lt;p&gt;尽管Taliwind提供了Tailwind CSS IntelliSense插件，可以帮助开发者输入Tailwind类名，但是Tailwind有成千上百个关键词，对于新人来说仍然有一定的上手成本。同时，Tailwind在不断的迭代，关键词也会出现变动，开发者需要保持关注。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zeng-jia-liao-wei-hu-cheng-ben&quot;&gt;增加了维护成本&lt;&#x2F;h3&gt;
&lt;p&gt;因为每个class都是独立的，如果要修改，每一个都要去修改，大大增加了维护成本。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;总体来说，尽管存在着那么多的缺点，但是瑕不掩瑜，Tailwind仍然是一个十分优秀的css框架，超过800K的周下载量可以说明这一点。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;naecoo.github.io&#x2F;tailwindcss&#x2F;.&#x2F;1627195641622.png&quot; alt=&quot;image-20210725144720847&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我的建议是，一方面，对于UI还原没那么重视的项目可以用起来了，比如to B行业的项目、公司内部的项目、私人小项目等等，使用Tailwind开发，可以极大的提高效率；另一方面，Tailwind可以作为UI框架的基础css框架，结合React、Vue、甚至是Web Components等组件化技术，不仅提高了开发效率，而且可以最大化压缩UI框架体积，提高极限性能。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>CSS逻辑属性</title>
        <published>2021-06-27T00:00:00+00:00</published>
        <updated>2021-06-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              naeco
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://naecoo.github.io/css-logical-properies/"/>
        <id>https://naecoo.github.io/css-logical-properies/</id>
        
        <content type="html" xml:base="https://naecoo.github.io/css-logical-properies/">&lt;h2 id=&quot;qian-yan&quot;&gt;前言&lt;&#x2F;h2&gt;
&lt;p&gt;​		传统的CSS属性大多是采用物理属性来定义的，比如元素的尺寸，偏移和边距等属性。但是随着业务的发展，越来越多的web应用需要考虑到国家化，必须适配不同的语言。大部分国家的语言排版都是从左到右，即LTR(left to right)，但是仍然有一部分语言采用的是从右到左，即RTL(right to left)的版本布局，比如阿拉伯语和希伯来语等。&lt;&#x2F;p&gt;
&lt;p&gt;​	但是仅凭靠现有的物理属性，CSS很难处理多语言的业务场景，比如下面这个简单的例子：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;naecoo.github.io&#x2F;css-logical-properies&#x2F;.&#x2F;1625380910525.png&quot; alt=&quot;image-20210704144150291&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;一个图标和一行文本，要求是文本距离图标要有一定的间距。如果按照传统的思路，我们可能直接加一个外边距就处理完成了：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&#x2F;&#x2F; 代表icon
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;svg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;icon&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;....&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;svg&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;CSS is really good&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;icon &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    margin-right: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5em&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但是，当我们面对RTL的文本排版时，效果将会变成这样：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;naecoo.github.io&#x2F;css-logical-properies&#x2F;.&#x2F;1625381308779.png&quot; alt=&quot;image-20210704144828558&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;很显然这是不符合实际需求的，为了兼容，我们不得不进行类似的处理:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;lang&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ar&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;] .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;icon &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    margin-right： 0;
&lt;&#x2F;span&gt;&lt;span&gt;    margin-left: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5em&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;​		虽然这只是一个简单的例子，但也表明为了编写兼容多种语言的web页面，前端开发人员不得不做大量重复繁琐的样式调正，所以我们迫切需要一种新特性，可以让开发者根据书写模式来维护布局的完整性。幸运的是，CSS工作组也看到了这种困境，提出了&lt;a href=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;css-logical-1&#x2F;#intro&quot;&gt;CSS逻辑属性（CSS Logical Properties and Values Level 1）&lt;&#x2F;a&gt;的这一特性，下面，我们将详细介绍该特性&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shen-me-shi-luo-ji-shu-xing&quot;&gt;什么是逻辑属性&lt;&#x2F;h2&gt;
&lt;p&gt;​	&lt;img src=&quot;https:&#x2F;&#x2F;naecoo.github.io&#x2F;css-logical-properies&#x2F;.&#x2F;1625755655244.jpg&quot; alt=&quot;img&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;​		传统CSS盒子模型中的top、right、bottom和left代表了UI视图在物理维度上的属性，与显示屏幕的方向保持一致，而css逻辑属性则和文档流排版的方向保持一致，这意味着逻辑属性可以根据文档流排版方向的改变而改变。首先我们要搞清楚什么是文档流的排版方向，在默认情况下，文档流的排版是从右到左，从上到下。而HTML的&lt;code&gt;dir&lt;&#x2F;code&gt;属性和CSS的&lt;code&gt;direction&lt;&#x2F;code&gt;、&lt;code&gt;writing-mode&lt;&#x2F;code&gt;，甚至是&lt;code&gt;flex&lt;&#x2F;code&gt;和&lt;code&gt;grid&lt;&#x2F;code&gt;等属性都可以改变文档的排版方向。一旦改变了文档排版方向，物理属性的左右上下就失去了意义，因为这些属性并没有和文档流的方向关联起来。因此，在CSS的逻辑属性中，并没有方向的概念，只有开始(&lt;code&gt;start&lt;&#x2F;code&gt;)和结束(&lt;code&gt;end&lt;&#x2F;code&gt;)，又由于web页面是二维的布局，所以也包含块(&lt;code&gt;block&lt;&#x2F;code&gt;)和内联(&lt;code&gt;inline&lt;&#x2F;code&gt;)的概念。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kuai-zhuang-liu-block-flow&quot;&gt;块状流(block flow)&lt;&#x2F;h3&gt;
&lt;p&gt;​		块状流就是块状元素排列的方向，英文和中文默认方向是从顶部到底部，类似于&lt;code&gt;flex&lt;&#x2F;code&gt;布局的主轴。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;naecoo.github.io&#x2F;css-logical-properies&#x2F;.&#x2F;1625403658411.svg&quot; alt=&quot;JKfvuIFBBtmvylmFSV8K&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nei-lian-liu-inline-flow&quot;&gt;内联流(inline flow)&lt;&#x2F;h3&gt;
&lt;p&gt;​		内联流就是内联元素或者文本排列的方向，英文和中文默认方向是从左边到右边，类似于&lt;code&gt;flex&lt;&#x2F;code&gt;布局的交叉轴。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;naecoo.github.io&#x2F;css-logical-properies&#x2F;.&#x2F;1625403779268.svg&quot; alt=&quot;DfyMS0jh0SjSxaeNioJt&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;​		block flow和inline flow的方向并不是固定的，可以用过HTML的&lt;code&gt;dir&lt;&#x2F;code&gt;属性，CSS的&lt;code&gt;direction&lt;&#x2F;code&gt;和&lt;code&gt;writing-mode&lt;&#x2F;code&gt;等属性进行变更，总之block flow就是块状元素堆叠的方向，inline flow就是内联元素和文本排列的方向。通过设定不同的&lt;code&gt;writing-mode&lt;&#x2F;code&gt;，block flow可以变成从底部到顶部、从左到右甚至是从右到左，inline flow同理，&lt;code&gt;wrigin-mode&lt;&#x2F;code&gt;的使用方法可以参考[MDN](&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;CSS&#x2F;writing-mode&quot;&gt;writing-mode - CSS: Cascading Style Sheets | MDN (mozilla.org)&lt;&#x2F;a&gt;)。&lt;&#x2F;p&gt;
&lt;p&gt;​		在CSS逻辑属性中，不再需要使用&lt;code&gt;top&lt;&#x2F;code&gt;、&lt;code&gt;right&lt;&#x2F;code&gt;、&lt;code&gt;bottom&lt;&#x2F;code&gt;和&lt;code&gt;right&lt;&#x2F;code&gt;等物理属性了描述方向了，取而代之的是&lt;code&gt;start&lt;&#x2F;code&gt;和&lt;code&gt;end&lt;&#x2F;code&gt;。比如，按照正常的文档流（英文），&lt;code&gt;margin-top&lt;&#x2F;code&gt;属性可以改为&lt;code&gt;margin-block-start&lt;&#x2F;code&gt;，&lt;code&gt;margin-bottom&lt;&#x2F;code&gt;改为&lt;code&gt;margin-block-end&lt;&#x2F;code&gt;，&lt;code&gt;margin-left&lt;&#x2F;code&gt;改为&lt;code&gt;margin-inline-start&lt;&#x2F;code&gt;，&lt;code&gt;margin-right&lt;&#x2F;code&gt;改为&lt;code&gt;margin-inline-end&lt;&#x2F;code&gt;，&lt;code&gt;padding&lt;&#x2F;code&gt;和&lt;code&gt;border&lt;&#x2F;code&gt;也是有相应的转换，如下图所示：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;naecoo.github.io&#x2F;css-logical-properies&#x2F;.&#x2F;1625411075738.png&quot; alt=&quot;GezxDZXkJgkMevkKg39M&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我们可以简单对比一下两者的差异：&lt;&#x2F;p&gt;
&lt;p&gt;HTML代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h3&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;container1&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h3&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;container&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;box&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;1&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;box&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;2&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h3&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;container2&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h3&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;container&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;box&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;1&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;box&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;2&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;CSS代码&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;root &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      --size: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;container &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      display: flex;
&lt;&#x2F;span&gt;&lt;span&gt;      margin-top: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      padding: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      border: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1px &lt;&#x2F;span&gt;&lt;span&gt;solid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#000&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;box &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      width: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt;(--size);
&lt;&#x2F;span&gt;&lt;span&gt;      height: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt;(--size);
&lt;&#x2F;span&gt;&lt;span&gt;      line-height: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt;(--size);
&lt;&#x2F;span&gt;&lt;span&gt;      text-align: center;
&lt;&#x2F;span&gt;&lt;span&gt;      background-color: sandybrown;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;container&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;nth-of-type(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;last-child &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      margin-left: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;container&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;nth-of-type(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;last-child &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      margin-inline-start: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;结果：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;naecoo.github.io&#x2F;css-logical-properies&#x2F;.&#x2F;1625411774281.png&quot; alt=&quot;image-20210704231614024&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;​		可以看出来，当设定正常的文档版本方向时，两者结果是一样的，黄色box都有10px的左边距。因为此时是正常的文档流，inline flow是从左到右，也就是&lt;code&gt;direction: ltr&lt;&#x2F;code&gt;的效果，此时inline flow的方向是这样的：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;direction: ltr&lt;&#x2F;code&gt;: &lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;naecoo.github.io&#x2F;css-logical-properies&#x2F;.&#x2F;1625412798241.png&quot; alt=&quot;image-20210704233318006&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;​	我们可以尝试改变一下&lt;code&gt;direction&lt;&#x2F;code&gt;，看看效果：&lt;&#x2F;p&gt;
&lt;p&gt;CSS代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;root &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      --size: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;container &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      display: flex;
&lt;&#x2F;span&gt;&lt;span&gt;      margin-top: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      padding: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      border: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1px &lt;&#x2F;span&gt;&lt;span&gt;solid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#000&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	  &#x2F;&#x2F; inline flow修改为从右到左方向
&lt;&#x2F;span&gt;&lt;span&gt;      direction: rtl;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;box &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      width: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt;(--size);
&lt;&#x2F;span&gt;&lt;span&gt;      height: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt;(--size);
&lt;&#x2F;span&gt;&lt;span&gt;      line-height: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt;(--size);
&lt;&#x2F;span&gt;&lt;span&gt;      text-align: center;
&lt;&#x2F;span&gt;&lt;span&gt;      background-color: sandybrown;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;container&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;nth-of-type(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;last-child &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      margin-left: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;container&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;nth-of-type(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;last-child &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      margin-inline-start: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;结果：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;naecoo.github.io&#x2F;css-logical-properies&#x2F;.&#x2F;1625412110093.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;​		很明显可以看出来，第一个container的box设置的是物理属性，当文档排版方向发生改变，布局效果就失去了效果，因为container1下的box元素设定的是物理属性，是固定不变的。而container2下的box设置的逻辑属性会随着排版方向变化的变化，在从右到左的布局中，&lt;code&gt;start&lt;&#x2F;code&gt;变成了右边开始，&lt;code&gt;end&lt;&#x2F;code&gt;变成了左边，所以布局效果不会受到影响。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;direction: rtl&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;naecoo.github.io&#x2F;css-logical-properies&#x2F;.&#x2F;1625412710214.png&quot; alt=&quot;image-20210704233149969&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;​		CSS逻辑属性的优势就体现与此，其设定的值能够从逻辑角度（排版方向）控制布局，而不是基于物理维度。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;luo-ji-shu-xing-jie-shao&quot;&gt;逻辑属性介绍&lt;&#x2F;h2&gt;
&lt;p&gt;​		CSS的逻辑属性不仅仅包括&lt;code&gt;margin&lt;&#x2F;code&gt;，下面我们将逐个介绍认识，下面的例子描述都是基于正常的英文文档流，inline flow为从左到右，block flow为从上到下。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fang-xiang&quot;&gt;方向&lt;&#x2F;h3&gt;
&lt;p&gt;​		传统的定位属性是&lt;code&gt;top&lt;&#x2F;code&gt;，&lt;code&gt;right&lt;&#x2F;code&gt;、&lt;code&gt;bottom&lt;&#x2F;code&gt;和&lt;code&gt;left&lt;&#x2F;code&gt;，基于逻辑属性，我们采用&lt;code&gt;start&lt;&#x2F;code&gt;和&lt;code&gt;end&lt;&#x2F;code&gt;来代替。&lt;&#x2F;p&gt;
&lt;p&gt;​		比如向右对齐文本:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    text-align: right;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;​		现在我们采用:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;p&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-p &quot;&gt;&lt;code class=&quot;language-p&quot; data-lang=&quot;p&quot;&gt;&lt;span&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;	text-align: end;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;​		同样的，在定位系统中，我们可以使用&lt;code&gt;block-{start|end}&lt;&#x2F;code&gt;和&lt;code&gt;inline-{start|end}&lt;&#x2F;code&gt;属性，比如，基于英文文档排版方向，使元素向上偏移10px，向右偏移20px：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;element &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    position: absolute;
&lt;&#x2F;span&gt;&lt;span&gt;    block-start: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    inline-start: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;​		如果是基于物理属性：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;element &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    position: absolute;
&lt;&#x2F;span&gt;&lt;span&gt;    top: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    left: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;chi-cun&quot;&gt;尺寸&lt;&#x2F;h3&gt;
&lt;p&gt;​		相对应的，元素尺寸也有了新的写法，&lt;code&gt;width&lt;&#x2F;code&gt;改为&lt;code&gt;inline-size&lt;&#x2F;code&gt;代替，&lt;code&gt;height&lt;&#x2F;code&gt;改为&lt;code&gt;block-size&lt;&#x2F;code&gt;，如果我们像限定元素宽200px，高100px，可以这样书写：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;element &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    inline-size: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;200px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    block-size: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;​		不仅如此，最大最小尺寸也可以用逻辑属性来代替，比如限定一个元素最大宽度为150px，最小高度为200px：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;element &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    max-inline-size: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;150px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    min-block-size: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;200px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;nei-wai-bian-ju&quot;&gt;内外边距&lt;&#x2F;h3&gt;
&lt;p&gt;​		前文已经提到逻辑属性中的外边距，其实内边距也是一样的，抛弃物理属性后，现在书写边距将会采用&lt;code&gt;{padding|margin}-{block|inline}-{start-end}&lt;&#x2F;code&gt;和&lt;code&gt;{padding|margin}-{block|inline}&lt;&#x2F;code&gt;两种模式的属性书写，我们先来看第一个，比方为元素添加右外边距20px、上外边距10px，同时添加30px下外边距：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;element &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    margin-inline-start: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    margin-block-start: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    margin-block-end: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;​		有时候，为每一个属性单独设置值是没有必要的，CSS逻辑属性同时也提供了简写的方式：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;element &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    margin-block: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10px 20px&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 分别设置开始和结束值 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    margin-block: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10%&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 同时设置开始值和结束值 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 关键字 值 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    margin-block: auto;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* 全局 值 *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    margin-block: inherit;
&lt;&#x2F;span&gt;&lt;span&gt;    margin-block: initial;
&lt;&#x2F;span&gt;&lt;span&gt;    margin-block: unset;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;​		内边距的属性和外边距是一样的，把&lt;code&gt;margin&lt;&#x2F;code&gt;换成&lt;code&gt;padding&lt;&#x2F;code&gt;即可。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bian-kuang&quot;&gt;边框&lt;&#x2F;h3&gt;
&lt;p&gt;​		&lt;code&gt;border&lt;&#x2F;code&gt;和&lt;code&gt;border-radius&lt;&#x2F;code&gt;也可以通过CSS逻辑属性设置，比方在底部和右侧添加边框，并在右侧添加5px的&lt;code&gt;border-radius&lt;&#x2F;code&gt;：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;element &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    border-bottom: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1px &lt;&#x2F;span&gt;&lt;span&gt;solid red;
&lt;&#x2F;span&gt;&lt;span&gt;  	border-right: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1px &lt;&#x2F;span&gt;&lt;span&gt;solid red;
&lt;&#x2F;span&gt;&lt;span&gt;  	border-bottom-right-radius: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;​		边框可以设定的参数很多，所以衍生出来的逻辑属性也非常多，在此就不一一罗列了，可以参考&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;CSS&#x2F;CSS_Logical_Properties#properties_for_margins_borders_and_padding&quot;&gt;MDN文档&lt;&#x2F;a&gt;去了解，不管是简写还是具体值设定，都有相关的介绍。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ding-wei&quot;&gt;定位&lt;&#x2F;h3&gt;
&lt;p&gt;​		前面提到，当&lt;code&gt;top&lt;&#x2F;code&gt;和&lt;code&gt;left&lt;&#x2F;code&gt;等作为物理属性时，可以用相对应的逻辑属性代替。理所当然的，当&lt;code&gt;top&lt;&#x2F;code&gt;、&lt;code&gt;left&lt;&#x2F;code&gt;、&lt;code&gt;right&lt;&#x2F;code&gt;和&lt;code&gt;bottom&lt;&#x2F;code&gt;作为属性名的时候，比如作为定位属性使用的时候，CSS逻辑属性也有提供&lt;code&gt;inset-{block|inline}&lt;&#x2F;code&gt;和&lt;code&gt;inser-{block|inline}-{start|end}&lt;&#x2F;code&gt;两种模式的属性作为代替。比方说这样的样式：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;element &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    position: relative;
&lt;&#x2F;span&gt;&lt;span&gt;    top: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    right: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;​		可以改为：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;element &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    position: relative;
&lt;&#x2F;span&gt;&lt;span&gt;    inset-block-start: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    inset-inline-end: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;​		也可以用简写&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;element &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    position: relative;
&lt;&#x2F;span&gt;&lt;span&gt;    inset-block: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20px 0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    inset-inline: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 10px&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;zong-jie&quot;&gt;总结&lt;&#x2F;h2&gt;
&lt;p&gt;​	下面一张图可以看到逻辑属性和物理属性的对比：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;naecoo.github.io&#x2F;css-logical-properies&#x2F;.&#x2F;1625841832479.jpg&quot; alt=&quot;v2-eaca48e0be9936a6ccdee360be21e994_r&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;​		我们一直习惯使用物理属性 &lt;code&gt;left&lt;&#x2F;code&gt;、&lt;code&gt;right&lt;&#x2F;code&gt;、&lt;code&gt;top&lt;&#x2F;code&gt;、&lt;code&gt;bottom&lt;&#x2F;code&gt; 描述盒模型，但是这些属性受制于书写模式，一旦书写模式改变，物理属性也随之改变，从而造成问题。但在逻辑属性中却不一样，因为逻辑属性中没有方向性的概念，不受书写模式的干扰。从现在开始，请尽可能的使用逻辑属性，减少使用物理属性，让CSS更加自然、灵活和贴切。&lt;&#x2F;p&gt;
&lt;p&gt;​		最后，我们看一下CSS逻辑属性的浏览器支持性，请确保你的用户群体浏览器版本属于这一范围:&lt;&#x2F;p&gt;
&lt;p&gt;​	&lt;img src=&quot;https:&#x2F;&#x2F;naecoo.github.io&#x2F;css-logical-properies&#x2F;.&#x2F;1625841995642.png&quot; alt=&quot;捕获&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;can-kao&quot;&gt;参考&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;web.dev&#x2F;learn&#x2F;css&#x2F;logical-properties&quot;&gt;css-logical-properties&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;caniuse.com&#x2F;?search=logic&quot;&gt;&amp;quot;logic&amp;quot; | Can I use... Support tables for HTML5, CSS3, etc&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;css-tricks.com&#x2F;css-logical-properties&#x2F;&quot;&gt;CSS Logical Properties | CSS-Tricks&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.smashingmagazine.com&#x2F;2018&#x2F;03&#x2F;understanding-logical-properties-values&#x2F;&quot;&gt;Understanding Logical Properties And Values — Smashing Magazine&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;zh-CN&#x2F;docs&#x2F;Web&#x2F;CSS&#x2F;CSS_Logical_Properties&quot;&gt;CSS 逻辑属性与值 - CSS（层叠样式表） | MDN (mozilla.org)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.zhihu.com&#x2F;pin&#x2F;1250489765822078976&quot;&gt;CSS逻辑属性和物理属性之间的映射关系&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>伪类和伪元素</title>
        <published>2019-09-01T00:00:00+00:00</published>
        <updated>2019-09-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              naeco
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://naecoo.github.io/pseudo/"/>
        <id>https://naecoo.github.io/pseudo/</id>
        
        <content type="html" xml:base="https://naecoo.github.io/pseudo/">&lt;h4 id=&quot;qian-yan&quot;&gt;前言&lt;&#x2F;h4&gt;
&lt;p&gt;最近看一些前端面试题，经常有问到伪类和伪元素的作用以及两者区别，所以特意找了一些资料学习。下面是我对这一方面知识的理解和总结，可能会有遗漏或者一些出入，欢迎大家指正，相互交流～&lt;&#x2F;p&gt;
&lt;h4 id=&quot;wei-lei&quot;&gt;伪类&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;A psuedo-class is a selector that selects elements that are in a specific state, e.g. they are the first element of their type, or they are being hovered over by the mouse pointer. They tend to act as if you had applied a class to some part of your document, often helping you cut down on excess classes in your markup, and giving you more flexible, maintainable code.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;MDN上面阐述的很明确，伪类就是一个选择处于特定状态的元素的选择器，比如某一个clsss的第一个元素，某个被hover的元素等等...，我们可以理解成一个特定的CSS类，但与普通的类不一样，它只有处于DOM树无法描述的状态下才能为元素添加样式，所以将其称为伪类&lt;&#x2F;p&gt;
&lt;h4 id=&quot;wei-yuan-su&quot;&gt;伪元素&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Pseudo-elements behave in a similar way, however they act as if you had added a whole new HTML element into the markup, rather than applying a class to existing elements. Pseudo-elements start with a double colon ::&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;伪元素和伪类很像，但是伪元素类似于增添一个新的DOM节点到DOM树中，而不是改变元素的状态。注意了，这里是类似，而不是真的增加一个节点，这也是其被称为伪元素的原因（实质上，元素被创建在文档外）。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;liang-zhe-qu-bie&quot;&gt;两者区别&lt;&#x2F;h4&gt;
&lt;p&gt;伪类是操作文档中已有的元素，而伪元素是创建了一个文档外的元素，两者最关键的区别就是这点。此外，为了书写CSS时进行区分，一般伪类是单冒号，如&lt;code&gt;:hover&lt;&#x2F;code&gt;，而伪元素是双冒号&lt;code&gt;::before&lt;&#x2F;code&gt;。一般大部分伪类强制使用单冒号，大部分伪元素单冒号和双冒号都可以，但是为了区分，建议按照规范书写。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;wei-lei-he-wei-yuan-su-du-you-na-xie&quot;&gt;伪类和伪元素都有哪些？&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-gold-cdn.xitu.io&#x2F;2019&#x2F;9&#x2F;1&#x2F;16ceac430d44fc54?w=594&amp;amp;h=537&amp;amp;f=png&amp;amp;s=50228&quot; alt=&quot;伪类&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-gold-cdn.xitu.io&#x2F;2019&#x2F;9&#x2F;1&#x2F;16ceac464bbf0add?w=491&amp;amp;h=212&amp;amp;f=png&amp;amp;s=17507&quot; alt=&quot;伪元素&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;伪类&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;选择器&lt;&#x2F;th&gt;&lt;th&gt;作用&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;:avtive&lt;&#x2F;td&gt;&lt;td&gt;匹配被用户激活的元素（比如点击）&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:blank&lt;&#x2F;td&gt;&lt;td&gt;匹配空的input&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:checked&lt;&#x2F;td&gt;&lt;td&gt;匹配被选中的radio或者checkbox&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:disabled&lt;&#x2F;td&gt;&lt;td&gt;匹配处于不可用状态的可交互元素&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:empty&lt;&#x2F;td&gt;&lt;td&gt;匹配没有子元素的元素&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:enabled&lt;&#x2F;td&gt;&lt;td&gt;匹配处于可用状态的可交互元素&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:first-child&lt;&#x2F;td&gt;&lt;td&gt;匹配在兄弟元素中处于第一的元素&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:first-of-type&lt;&#x2F;td&gt;&lt;td&gt;匹配在它的兄弟元素中是某个类型中的第一个的元素&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:focus&lt;&#x2F;td&gt;&lt;td&gt;匹配获取焦点的的元素&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:focus-visible&lt;&#x2F;td&gt;&lt;td&gt;匹配获取焦点且能被用户看到的元素&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:hover&lt;&#x2F;td&gt;&lt;td&gt;匹配用户在此悬停或者触摸的元素&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:invalid&lt;&#x2F;td&gt;&lt;td&gt;匹配处于不合法状态的元素，比如&lt;code&gt;&amp;lt;input&amp;gt;&lt;&#x2F;code&gt;正则校验不通过&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:lang&lt;&#x2F;td&gt;&lt;td&gt;根据文档语言匹配元素&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:last-child&lt;&#x2F;td&gt;&lt;td&gt;匹配在兄弟元素中处于最后的元素&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:last-of-type&lt;&#x2F;td&gt;&lt;td&gt;匹配在它的兄弟元素中是某个类型中的最后一个的元素&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:link&lt;&#x2F;td&gt;&lt;td&gt;匹配没有被访问过的链接&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:is()&lt;&#x2F;td&gt;&lt;td&gt;匹配符合结果的元素&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:not()&lt;&#x2F;td&gt;&lt;td&gt;匹配符合结果之外的元素&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:nth-child(n)&lt;&#x2F;td&gt;&lt;td&gt;匹配父元素的第n个子元素。n可以是一个数字、一个关键字或一个公式&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:nth-of-type(n)&lt;&#x2F;td&gt;&lt;td&gt;匹配父元素的某种类型元素中的第n个子元素。n可以是一个数字、一个关键字或一个  公式&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:nth-last-child(n)&lt;&#x2F;td&gt;&lt;td&gt;与nth-child()类似，从后往前数&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:nth-last-of-type(n)&lt;&#x2F;td&gt;&lt;td&gt;与nth-last-of-type-child()类似，从后往前数&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:only-child&lt;&#x2F;td&gt;&lt;td&gt;匹配没有兄弟元素的元素&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:only-of-type&lt;&#x2F;td&gt;&lt;td&gt;匹配一个元素，该元素是其兄弟元素中唯一的一个类型。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:placeholder-shown&lt;&#x2F;td&gt;&lt;td&gt;匹配显示默认占位符的表单元素&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:required&lt;&#x2F;td&gt;&lt;td&gt;匹配内容为必填的表单元素&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:root&lt;&#x2F;td&gt;&lt;td&gt;匹配根元素&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:valid&lt;&#x2F;td&gt;&lt;td&gt;匹配处于合法状态的元素&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:target&lt;&#x2F;td&gt;&lt;td&gt;匹配符合当前url的锚点元素&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;:visited&lt;&#x2F;td&gt;&lt;td&gt;匹配被访问过的元素&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;ul&gt;
&lt;li&gt;伪元素&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;选择器&lt;&#x2F;th&gt;&lt;th&gt;作用&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;::before&lt;&#x2F;td&gt;&lt;td&gt;匹配在原始元素的实际内容之后出现的区域&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;::after&lt;&#x2F;td&gt;&lt;td&gt;匹配在原始元素的实际内容之前出现的区域&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;::first-letter&lt;&#x2F;td&gt;&lt;td&gt;匹配元素的第一个字母&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;::first-line&lt;&#x2F;td&gt;&lt;td&gt;匹配元素第一行&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;::selection&lt;&#x2F;td&gt;&lt;td&gt;匹配被选中的文本或者区域&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h4 id=&quot;can-kao-zi-liao&quot;&gt;参考资料&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Learn&#x2F;CSS&#x2F;Building_blocks&#x2F;Selectors&#x2F;Pseudo-classes_and_pseudo-elements&quot;&gt;MDN, Pseudo-classes_and_pseudo-elements&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.alloyteam.com&#x2F;2016&#x2F;05&#x2F;summary-of-pseudo-classes-and-pseudo-elements&#x2F;&quot;&gt;AlloyTeam, 总结伪类和伪元素&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
</feed>
